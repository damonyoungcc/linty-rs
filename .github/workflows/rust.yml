name: Rust CI & Coverage

on:
  push: # 任意分支的每次提交都触发（含 feature/*）
  pull_request: # PR 也触发（用于覆盖率评论）

permissions:
  contents: read
  pull-requests: write # 允许机器人在 PR 下评论

env:
  CARGO_TERM_COLOR: always

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 固定工具链，并装上需要的组件
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview, clippy, rustfmt

      # 缓存 Cargo，加速
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      # 可选：格式与静态检查（先严格些；若嫌烦可删除或放宽）
      - name: Format
        run: cargo fmt --all --check
      - name: Clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

      # 构建 & 测试（整个 workspace）
      - name: Build
        run: cargo build --workspace --all-targets --locked --verbose
      - name: Test
        run: cargo test --workspace --all-features --locked --verbose

      # 安装与生成覆盖率
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - id: cov
        name: Coverage (workspace)
        shell: bash
        run: |
          cargo llvm-cov --workspace --lcov --output-path lcov.info
          summary="$(cargo llvm-cov --workspace --summary-only)"
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          total=$(echo "$summary" | grep -Eo 'lines:\s+[0-9.]+%' | awk '{print $2}')
          echo "TOTAL=$total" >> $GITHUB_ENV

      # 仅在 PR 上评论覆盖率（push 到分支时不会评论）
      - name: Comment coverage on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: coverage
          message: |
            **Coverage (lines):** ${{ env.TOTAL }}

            <details><summary>Summary</summary>

            ```
            ${{ steps.cov.outputs.summary }}
            ```
            </details>
